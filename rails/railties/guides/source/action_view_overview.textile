h2. Action View Overview

In this guide you will learn:

* What Action View is, and how to use it with Rails
* How to use Action View outside of Rails
* How best to use templates, partials, and layouts
* What helpers are provided by Action View, and how to make your own
* How to use localized views

endprologue.

h3. What is Action View?

Action View and Action Controller are the two major components of Action Pack. In Rails, web requests are handled by Action Pack, which splits the work into a controller part (performing the logic) and a view part (rendering a template). Typically, Action Controller will be concerned with communicating with the database and performing CRUD actions where necessary. Action View is then responsible for compiling the response. 

Action View templates are written using embedded Ruby in tags mingled with HTML. To avoid cluttering the templates with boilerplate code, a number of helper classes provide common behavior for forms, dates, and strings. It's also easy to add new helpers to your application as it evolves. 

Note: Some features of Action View are tied to Active Record, but that doesn't mean that Action View depends on Active Record. Action View is an independent package that can be used with any sort of backend.

h3. Using Action View with Rails

TODO...

h3. Using Action View outside of Rails

Action View works well with Action Record, but it can also be used with other Ruby tools. We can demonstrate this by creating a small "Rack":http://rack.rubyforge.org/ application that includes Action View functionality. This may be useful, for example, if you'd like access to Action View's helpers in a Rack application. 

Let's start by ensuring that you have the Action Pack and Rack gems installed:

<shell>
gem install actionpack
gem install rack
</shell>

Now we'll create a simple "Hello World" application that uses the +titleize+ method provided by Action View.

*hello_world.rb:*

<ruby>
require 'rubygems'
require 'action_view'
require 'rack'

def hello_world(env)
  [200, {"Content-Type" => "text/html"}, "hello world".titleize]
end

Rack::Handler::Mongrel.run method(:hello_world), :Port => 4567
</ruby>

We can see this all come together by starting up the application and then visiting +http://localhost:4567/+

<shell>
ruby hello_world.rb
</shell>

TODO needs a screenshot? I have one - not sure where to put it. 

Notice how 'hello world' has been converted into 'Hello World' by the +titleize+ helper method. 

Action View can also be used with "Sinatra":http://www.sinatrarb.com/ in the same way. 

Let's start by ensuring that you have the Action Pack and Sinatra gems installed:

<shell>
gem install actionpack
gem install sinatra
</shell>

Now we'll create the same "Hello World" application in Sinatra.

*hello_world.rb:*

<ruby>
require 'rubygems'
require 'action_view'
require 'sinatra'

get '/' do
  erb 'hello world'.titleize
end
</ruby>

Then, we can run the application:

<shell>
ruby hello_world.rb
</shell>

Once the application is running, you can see Sinatra and Action View working together by visiting +http://localhost:4567/+

TODO needs a screenshot? I have one - not sure where to put it. 

h3. Templates, Partials and Layouts

TODO...

TODO see http://guides.rubyonrails.org/layouts_and_rendering.html

h3. Using Templates, Partials and Layouts in "The Rails Way"

TODO...

h3. Partial Layouts

Partials can have their own layouts applied to them. These layouts are different than the ones that are specified globally for the entire action, but they work in a similar fashion.

Let's say we're displaying a post on a page where it should be wrapped in a +div+ for display purposes. First, we'll create a new +Post+:

<ruby>
Post.create(:body => 'Partial Layouts are cool!')
</ruby>

In the +show+ template, we'll render the +post+ partial wrapped in the +box+ layout:

*posts/show.html.erb*

<ruby>
<%= render :partial => 'post', :layout => 'box', :locals => {:post => @post} %>
</ruby>

The +box+ layout simply wraps the +post+ partial in a +div+:

*posts/_box.html.erb*

<ruby>
<div class='box'>
  <%= yield %>
</div>
</ruby>

The +post+ partial wraps the post's +body+ in a +div+ with the +id+ of the post using the +div_for+ helper:

*posts/_post.html.erb*

<ruby>
<% div_for(post) do %>
  <p><%= post.body %></p>
<% end %>
</ruby>

This example would output the following:

<ruby>
<div class='box'>
  <div id='post_1'>
    <p>Partial Layouts are cool!</p>
  </div>
</div>
</ruby>

Note that the partial layout has access to the local +post+ variable that was passed into the +render+ call. However, unlike application-wide layouts, partial layouts still have the underscore prefix.

You can also render a block of code within a partial layout instead of calling +yield+. For example, if we didn't have the +post+ partial, we could do this instead:

*posts/show.html.erb*

<ruby>
<% render(:layout => 'box', :locals => {:post => @post}) do %>
  <% div_for(post) do %>
    <p><%= post.body %></p>
  <% end %>
<% end %>
</ruby>

If we're using the same +box+ partial from above, his would produce the same output as the previous example.

h3. View Paths

TODO...

h3. Overview of all the helpers provided by Action View

h4. Active Record Helper

The Active Record Helper makes it easier to create forms for records kept in instance variables. You may also want to review the "Rails Form helpers guide":form_helpers.html.

+error_message_on+

Returns a string containing the error message attached to the method on the object if one exists.

<ruby>
error_message_on "post", "title"
</ruby>

+error_messages_for+

Returns a string with a DIV containing all of the error messages for the objects located as instance variables by the names given.

<ruby>
error_messages_for "post"
</ruby>

+form+

Returns a form with inputs for all attributes of the specified Active Record object. For example, let's say we have a +@post+ with attributes named +title+ of type +String+ and +body+ of type +Text+. Calling +form+ would produce a form to creating a new post with inputs for those attributes. 

<ruby>
form("post")
</ruby>

<ruby>
<form action='/posts/create' method='post'>
  <p>
    <label for="post_title">Title</label><br />
    <input id="post_title" name="post[title]" size="30" type="text" value="Hello World" />
  </p>
  <p>
    <label for="post_body">Body</label><br />
    <textarea cols="40" id="post_body" name="post[body]" rows="20"></textarea>
  </p>
  <input name="commit" type="submit" value="Create" />
</form>
</ruby>

Typically, +form_for+ is used instead of +form+ because it doesn't automatically include all of the model's attributes.

+input+

Returns a default input tag for the type of object returned by the method. 

For example, if +@post+ has an attribute +title+ mapped to a +String+ column that holds "Hello World":

<ruby>
input("post", "title") # => 
  <input id="post_title" name="post[title]" size="30" type="text" value="Hello World" />
</ruby>

h4. Asset Tag Helper

This module provides methods for generating HTML that links views to assets such as images, javascripts, stylesheets, and feeds. 

By default, Rails links to these assets on the current host in the public folder, but you can direct Rails to link to assets from a dedicated assets server by setting +ActionController::Base.asset_host+ in your +config/environment.rb+. For example, let's say your asset host is +assets.example.com+:

<ruby>
ActionController::Base.asset_host = "assets.example.com"
image_tag("rails.png") # => <img src="http://assets.example.com/images/rails.png" alt="Rails" /> 
</ruby>

+register_javascript_expansion+

Register one or more javascript files to be included when symbol is passed to javascript_include_tag. This method is typically intended to be called from plugin initialization to register javascript files that the plugin installed in public/javascripts.

<ruby>
ActionView::Helpers::AssetTagHelper.register_javascript_expansion :monkey => ["head", "body", "tail"]

javascript_include_tag :monkey # =>
  <script type="text/javascript" src="/javascripts/head.js"></script>
  <script type="text/javascript" src="/javascripts/body.js"></script>
  <script type="text/javascript" src="/javascripts/tail.js"></script>
</ruby>

+register_javascript_include_default+

Register one or more additional JavaScript files to be included when +javascript_include_tag :defaults+ is called. This method is typically intended to be called from plugin initialization to register additional +.js+ files that the plugin installed in +public/javascripts+.

+register_stylesheet_expansion+

Register one or more stylesheet files to be included when symbol is passed to +stylesheet_link_tag+. This method is typically intended to be called from plugin initialization to register stylesheet files that the plugin installed in +public/stylesheets+.

<ruby>
ActionView::Helpers::AssetTagHelper.register_stylesheet_expansion :monkey => ["head", "body", "tail"]

stylesheet_link_tag :monkey # =>
  <link href="/stylesheets/head.css"  media="screen" rel="stylesheet" type="text/css" />
  <link href="/stylesheets/body.css"  media="screen" rel="stylesheet" type="text/css" />
  <link href="/stylesheets/tail.css"  media="screen" rel="stylesheet" type="text/css" />
</ruby>

+auto_discovery_link_tag+

Returns a link tag that browsers and news readers can use to auto-detect an RSS or ATOM feed.

<ruby>
auto_discovery_link_tag(:rss, "http://www.example.com/feed.rss", {:title => "RSS Feed"}) # =>
  <link rel="alternate" type="application/rss+xml" title="RSS Feed" href="http://www.example.com/feed" />
</ruby>

+image_path+

Computes the path to an image asset in the public images directory. Full paths from the document root will be passed through. Used internally by +image_tag+ to build the image path.

<ruby>
image_path("edit.png") # => /images/edit.png
</ruby>

+image_tag+

Returns an html image tag for the source. The source can be a full path or a file that exists in your public images directory.

<ruby>
image_tag("icon.png") # => <img src="/images/icon.png" alt="Icon" />
</ruby>

+javascript_include_tag+

Returns an html script tag for each of the sources provided. You can pass in the filename (+.js+ extension is optional) of javascript files that exist in your +public/javascripts+ directory for inclusion into the current page or you can pass the full path relative to your document root.

<ruby>
javascript_include_tag "common" # =>
  <script type="text/javascript" src="/javascripts/common.js"></script>  
</ruby>

To include the Prototype and Scriptaculous javascript libraries in your application, pass +:defaults+ as the source. When using +:defaults+, if an +application.js+ file exists in your +public/javascripts+ directory, it will be included as well. 

<ruby>
javascript_include_tag :defaults
</ruby>

You can also include all javascripts in the javascripts directory using +:all+ as the source.

<ruby>
javascript_include_tag :all
</ruby>

You can also cache multiple javascripts into one file, which requires less HTTP connections to download and can better be compressed by gzip (leading to faster transfers). Caching will only happen if +ActionController::Base.perform_caching+ is set to true (which is the case by default for the Rails production environment, but not for the development environment).

<ruby>
javascript_include_tag :all, :cache => true # => 
  <script type="text/javascript" src="/javascripts/all.js"></script>  
</ruby>

+javascript_path+

Computes the path to a javascript asset in the +public/javascripts+ directory. If the source filename has no extension, +.js+ will be appended. Full paths from the document root will be passed through. Used internally by +javascript_include_tag+ to build the script path.

<ruby>
javascript_path "common" # => /javascripts/common.js
</ruby>

+stylesheet_link_tag+

Returns a stylesheet link tag for the sources specified as arguments. If you don't specify an extension, +.css+ will be appended automatically. 

<ruby>
stylesheet_link_tag "application" # =>
  <link href="/stylesheets/application.css" media="screen" rel="stylesheet" type="text/css" />
</ruby>

You can also include all styles in the stylesheet directory using :all as the source:

<ruby>
stylesheet_link_tag :all
</ruby>

You can also cache multiple stylesheets into one file, which requires less HTTP connections and can better be compressed by gzip (leading to faster transfers). Caching will only happen if ActionController::Base.perform_caching is set to true (which is the case by default for the Rails production environment, but not for the development environment). 

<ruby>
stylesheet_link_tag :all, :cache => true
  <link href="/stylesheets/all.css"  media="screen" rel="stylesheet" type="text/css" />
</ruby>

+stylesheet_path+

Computes the path to a stylesheet asset in the public stylesheets directory. If the source filename has no extension, .css will be appended. Full paths from the document root will be passed through. Used internally by stylesheet_link_tag to build the stylesheet path.

<ruby>
stylesheet_path "application" # => /stylesheets/application.css
</ruby>

h4. Atom Feed Helper

+atom_feed+

This helper makes building an ATOM feed easy. Here's a full usage example:

*config/routes.rb*

<ruby>
map.resources :posts
</ruby>

*app/controllers/posts_controller.rb*

<ruby>
def index
  @posts = Post.find(:all)

  respond_to do |format|
    format.html
    format.atom
  end
end
</ruby>

*app/views/posts/index.atom.builder*

<ruby>
atom_feed do |feed|
  feed.title("Posts Index")
  feed.updated((@posts.first.created_at))

  for post in @posts
    feed.entry(post) do |entry|
      entry.title(post.title)
      entry.content(post.body, :type => 'html')

      entry.author do |author|
        author.name(post.author_name)
      end
    end
  end
end
</ruby>

h4. Benchmark Helper

+benchmark+

Allows you to measure the execution time of a block in a template and records the result to the log. Wrap this block around expensive operations or possible bottlenecks to get a time reading for the operation.

<ruby>
<% benchmark "Process data files" do %>
  <%= expensive_files_operation %>
<% end %>  
</ruby>

This would add something like "Process data files (0.34523)" to the log, which you can then use to compare timings when optimizing your code.

h4. Cache Helper

+cache+

A method for caching fragments of a view rather than an entire action or page. This technique is useful caching pieces like menus, lists of news topics, static HTML fragments, and so on. This method takes a block that contains the content you wish to cache. See +ActionController::Caching::Fragments+ for more information.

<ruby>
<% cache do %>
  <%= render :partial => "shared/footer" %>
<% end %>
</ruby>

h4. Capture Helper

+capture+

The +capture+ method allows you to extract part of a template into a variable. You can then use this variable anywhere in your templates or layout.

<ruby>
<% @greeting = capture do %>
  <p>Welcome! The date and time is <%= Time.now %></p>
<% end %>
<ruby>

The captured variable can then be used anywhere else.

<ruby>
<html>
  <head>
    <title>Welcome!</title>
  </head>
  <body>
    <%= @greeting %>
  </body>
</html>
</ruby>  

+content_for+

Calling +content_for+ stores a block of markup in an identifier for later use. You can make subsequent calls to the stored content in other templates or the layout by passing the identifier as an argument to +yield+.

For example, let's say we have a standard application layout, but also a special page that requires certain Javascript that the rest of the site doesn't need. We can use +content_for+ to include this Javascript on our special page without fattening up the rest of the site.

*app/views/layouts/application.html.erb*

<ruby>
<html>
  <head>
    <title>Welcome!</title>
    <%= yield :special_script %>
  </head>
  <body>
    <p>Welcome! The date and time is <%= Time.now %></p>
  </body>
</html>
</ruby>

*app/views/posts/special.html.erb*

<ruby>
<p>This is a special page.</p>

<% content_for :special_script do %>
  <script type="text/javascript">alert('Hello!')</script>
<% end %>  
</ruby>

TODO continue at http://ap.rubyonrails.org/ on ActionView::Helpers::DateHelper

h3. Localized Views

Action View has the ability render different templates depending on the current locale.

For example, suppose you have a Posts controller with a show action. By default, calling this action will render +app/views/posts/show.html.erb+. But if you set +I18n.locale = :de+, then +app/views/posts/show.de.html.erb+ will be rendered instead. If the localized template isn't present, the undecorated version will be used. This means you're not required to provide localized views for all cases, but they will be preferred and used if available. 

You can use the same technique to localize the rescue files in your public directory. For example, setting +I18n.locale = :de+ and creating +public/500.de.html+ and +public/404.de.html+ would allow you to have localized rescue pages.

Since Rails doesn't restrict the symbols that you use to set I18n.locale, you can leverage this system to display different content depending on anything you like. For example, suppose you have some "expert" users that should see different pages from "normal" users. You could add the following to +app/controllers/application.rb+: 

<ruby>
before_filter :set_expert_locale

def set_expert_locale
  I18n.locale = :expert if current_user.expert?
end
</ruby>

Then you could create special views like +app/views/posts/show.expert.html.erb+ that would only be displayed to expert users.

You can read more about the Rails Internationalization (I18n) API "here":i18n.html. 

h3. Changelog

"Lighthouse Ticket":http://rails.lighthouseapp.com/projects/16213-rails-guides/tickets/71

* September 3, 2009: Continuing work by Trevor Turk, leveraging the "Action Pack docs":http://ap.rubyonrails.org/ and "What's new in Edge Rails":http://ryandaigle.com/articles/2007/8/3/what-s-new-in-edge-rails-partials-get-layouts
* April 5, 2009: Starting work by Trevor Turk, leveraging Mike Gunderloy's docs
